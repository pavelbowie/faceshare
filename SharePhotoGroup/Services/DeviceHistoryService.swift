//
//  DeviceHistoryService.swift
//  SharePhotoGroup
//
//  Created by Pavel Mac on 25/04/25
//

import CoreData
import UIKit
import MultipeerConnectivity

class DeviceHistoryService: ObservableObject {
    
    private let context: NSManagedObjectContext
    @Published var deviceHistory: [DeviceHistoryEntity] = []
    
    init(context: NSManagedObjectContext) {
        self.context = context
        loadDeviceHistory()
    }
    
    func loadDeviceHistory() {
        let request: NSFetchRequest<DeviceHistoryEntity> = DeviceHistoryEntity.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(keyPath: \DeviceHistoryEntity.lastConnected, ascending: false)]
        
        do {
            deviceHistory = try context.fetch(request)
            print("üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(deviceHistory.count) —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: \(error)")
        }
    }
    
    func updateDeviceHistory(peer: MCPeerID, name: String?, avatar: UIImage?) {
        let request: NSFetchRequest<DeviceHistoryEntity> = DeviceHistoryEntity.fetchRequest()
        request.predicate = NSPredicate(format: "deviceId == %@", peer.displayName)
        
        do {
            let results = try context.fetch(request)
            let device: DeviceHistoryEntity
            var deviceName = name
            
            if let existingDevice = results.first {
                device = existingDevice
                print("üì± –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(peer.displayName)")
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–æ–≤—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
                if deviceName == nil {
                    deviceName = device.deviceName
                }
                if avatar == nil && device.avatarData != nil {
                    // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –∏ –Ω–æ–≤—ã–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                    try context.save()
                    loadDeviceHistory()
                    return
                }
            } else {
                device = DeviceHistoryEntity(context: context)
                device.deviceId = peer.displayName
                print("üì± –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(peer.displayName)")
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if let deviceName = deviceName {
                device.deviceName = deviceName
            } else {
                device.deviceName = peer.displayName
            }
            device.lastConnected = Date()
            
            if let avatar = avatar {
                device.avatarData = avatar.jpegData(compressionQuality: 0.8)
            }
            
            try context.save()
            loadDeviceHistory()
            print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: \(error)")
        }
    }
    
    func deleteDeviceHistory(_ device: DeviceHistoryEntity) {
        context.delete(device)
        do {
            try context.save()
            loadDeviceHistory()
            print("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: \(error)")
        }
    }
    
    func reloadHistory() {
        print("üîÑ [DeviceHistoryService] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        loadDeviceHistory()
    }
} 
